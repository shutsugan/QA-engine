type Query {
  user(id: String!): User!
  quastions(skip: Int, limit: Int, published: Boolean): Quastions!
  quastion(id: String!): Quastion!
  answers(skip: Int, limit: Int, published: Boolean): Answers!
  answer(id: String!): Answer!
}

input signupInput {
  name: String!
  email: String!
  profile: String!
  google_id: String!
}

input createQuationInput {
  title: String!
  quastion: String!
  author: String!
}

input updateQuationInput {
  title: String
  quastion: String
  published: Boolean
}

input createAnwerInput {
  answer: String!
  answered: Boolean
  published: Boolean
  quastion: String!
  author: String!
}

input updateAnswerInput {
  answer: String
  answered: Boolean
  published: Boolean
}

type Mutation {
  signup(input: signupInput): User!
  createQuation(input: createQuationInput): Quastion!
  updateQuation(id: String!, input: updateQuationInput): Quastion!
  deleteQuation(id: String!): Quastion!
  createAnswer(input: createAnwerInput): Answer!
  updateAnswer(id: String! input: updateAnswerInput): Answer!
  deleteAnswer(id: String!): Answer!
}

type User {
  id: ID!
  name: String!
  email: String!
  profile: String
  google_id: String!
  quastions: [Quastion!]!
  answers: [Answer!]!
}

type Quastion {
  id: ID!
  title: String!
  quastion: String!
  published: Boolean!
  author: User!
  answers: [Answer!]!
  votes: [Vote!]!
}

type Answer {
  id: ID!
  answer: String!
  answered: Boolean!
  published: Boolean!
  quastion: Quastion!
  author: User!
  votes: [Vote!]!
}

type Vote {
  id: ID!
  author: User!
  quastion: Quastion!
  answer: Answer!
}

type Quastions {
  quastions: [Quastion!]!
  count: Int!
}

type Answers {
  answers: [Answer!]!
  count: Int!
}